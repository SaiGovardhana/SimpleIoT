/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Server;




import java.util.HashMap;
import java.util.Map;

import Server.Devices.CommunicationManager;
import Server.Devices.Device;

import io.javalin.Javalin;
import io.javalin.http.staticfiles.Location;


public class App {


    public static void main(String[] args) { 
        Javalin app=Javalin.create(
           cfg->{

            cfg.addStaticFiles(staticFiles -> {
                staticFiles.hostedPath = "/";                   
                staticFiles.location = Location.CLASSPATH;
                staticFiles.directory="/public";     
                
            
              });
            
            //The Devices and clients must ping Every 60 sec     
            cfg.wsFactoryConfig(
            wsCfg->{

                wsCfg.getPolicy().setIdleTimeout(70000);
            }    

            );
           } 

        ).start(4292);
        CommunicationManager deviceManager=new CommunicationManager();

        app.get("/Device/{id}",ctx->{
        try{
           
            String deviceId=ctx.pathParam("id");
            Device d=deviceManager.getDevice(deviceId);

            Map<String,Object>s=new HashMap<String,Object>();
            s.put("device",d);
            if(d==null)
            {
                System.out.println("DEVICe is null");
                ctx.render("/error.html");    
                return ;
            }
            ctx.render("/device.html",s);
        }
        catch(Exception e)
        {System.out.println(e);}
        }
        );
       
        app.ws("/Device/{id}",(wsCfg)->
        {
               wsCfg.onConnect(ctx->{
                   System.out.println("Path is    "+ctx.pathParam("id"));
                   
                   Device d=deviceManager.getDevice(ctx.pathParam("id"));
                   System.out.println(d);
                   if(d==null)
                        ctx.closeSession();
                    else
                    {   ctx.attribute("id",ctx.pathParam("id"));
                        d.onClientConnect(ctx);
                    }

                });

                wsCfg.onMessage(deviceManager::onClientMessage);
                wsCfg.onClose(deviceManager::onClientCloseDevice);
        }
    
        );

        app.ws("/Register", 
        ws->
        {
            ws.onConnect(deviceManager::onConnect);
            ws.onMessage(deviceManager::onMessage);
            ws.onClose(deviceManager::onClose);
            ws.onError(deviceManager::onError);
        }
        );

        app.ws("/Devices",
        ws->
        {
            ws.onConnect(deviceManager::addClientToBroadCast);
            ws.onMessage(deviceManager::onClientMessage);
            ws.onClose(deviceManager::onClientClose);

        }
        
        );

        

    }
}
